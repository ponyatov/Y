.file MODULE,'.lpp'
$'/* ',AUTOGEN,' */'
/***** lexer_head.sym *****/
$'%{\n#include "',MODULE,'.hpp"'
$'\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* token macroses */'
$'\t/* single char */'
\#define TC(X)	{ yylval.c = yytext[0]; return X; }
$'\t/* escaped single char */'
\#define T1(X)	{ yylval.c = yytext[1]; return X; }
$'\t/* simple string */'
\#define TS(X)	{ yylval.s = new string(yytext); return X; }
$'\t/* dynamic engine basic object (tag+value) */'
\#define TO(C,X)	{ yylval.o = new object(C,yytext); return X; }
$'\t/* dynamic engine class inherited from basic object */'
\#define TX(C,X)	{ yylval.o = new C(yytext); return X; }

string StrBuf;								/* buffer for string parser mode */

void incFileName(object* o) {						/* process included .sym */
	string filename = o->eval()->value;		/* eval(o) as filename parameter */
	W(new directive(".inc "+filename),false);  		/* dump directive to log */
	yyin = fopen(filename.c_str(),"r");			  /* open included .sym file */
	if (!yyin) yyerror(".inc "+filename);			   /* check file open ok */
	yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE )); /* switch lex */
}
$'%}'
$'\t\t\t\t\t/* options */\n%option noyywrap'
$'\t\t\t\t\t/* enable line numbers info in lexer */\n%option yylineno'
$'\t\t\t\t\t/* lexer states */'
$'\t\t\t\t\t/* bI/sym expresssion mode */\n%x x'
$'\t\t\t\t\t/* string parsing */\n%x s'
/***** lexer_head.sym *****/
%%

\\\\.					T1(CHAR)						/* escape prefixed char */
\#[^\\n]*\\n			{}								/* line comment */

^\.inc				{BEGIN(x); TO("sym",FINC);}		/* .inc lude .sym */
<<EOF>> 			{								/* pop state in included */
	yypop_buffer_state();
	if ( !YY_CURRENT_BUFFER ) yyterminate();
}
													/* documenting directives */
^\\.title[^\\n]*		TX(directive,DIRECTIVE)			/* curr.module title */
^\\.sec\\+?[^\\n]*		TX(directive,DIRECTIVE)			/* doc sectioning */

^\\.module[^\\n]*		TX(directive,DIRECTIVE)				/* set current module */
^\\.file				{BEGIN(x); TO("sym",FFILE);}		/* switch output file */
^\\.eof				{BEGIN(INITIAL); TO("sym",FEOF);}	/* end output file */

												/* bI/sym expressions mode */
\\\@					{BEGIN(x); TC(AX);}			/* dump AST */
\\\$					{BEGIN(x); TC(SX);}			/* evaluate (compute) AST */
<x>\\n				{BEGIN(INITIAL); TC(EOL);}	/* EOL is end of expression */
<x>,				TC(COMMA)					/* list separator */
<x>[a-zA-Z0-9]+		TO("sym",SYM)				/* generic bI language symbol */

												/* string parsing mode */
<x>\\'				{BEGIN(s); StrBuf="";}		/* go from X-mode: start str */
<s>\\'				{BEGIN(x); 					/* end string marker */
$'\t\t\t\t\tyylval.o=new object("str",StrBuf); return STR;}'
<s>\\\\n				{StrBuf+="\\n";}				/* \\n EOL in string */
<s>\\\\t				{StrBuf+="\\t";}				/* \\t TAB in string */
<s>.				{StrBuf+=yytext[0];}		/* any other char as is */

