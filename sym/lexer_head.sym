$'/* ',AUTOGEN,' */'
/***** lexer_head.sym *****/
$'%{\n#include "',MODULE,'.hpp"\n'
\#define TC(X)	{ yylval.c = yytext[0]; return X; }
\#define T1(X)	{ yylval.c = yytext[1]; return X; }
\#define TS(X)	{ yylval.s = new string(yytext); return X; }
\#define TO(C,X)	{ yylval.o = new object(C,yytext); return X; }
\#define TX(C,X)	{ yylval.o = new C(yytext); return X; }
string StrBuf;

void incFileName(object* o) {
	string filename = o->eval()->value;
	W(new directive(".inc "+filename),false);  
	yyin = fopen(filename.c_str(),"r");
	if (!yyin) yyerror(".inc "+filename);
	yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));
}
$'%}\n'

$'\t\t\t\t\t/* options */\n%option noyywrap'
$'\t\t\t\t\t/* enable line numbers info in lexer */\n%option yylineno'
$'\t\t\t\t\t/* lexer states */'
$'\t\t\t\t\t/* bI/sym expresssion mode */\n%x x'
$'\t\t\t\t\t/* string parsing */\n%x s'

/***** lexer_head.sym *****/

%%

\\\\.					T1(CHAR)						/* escape prefixed char */
\#[^\\n]*\\n			{}								/* line comment */

^\.inc				{BEGIN(x); TO("sym",FINC);}		/* .inc lude */
<<EOF>> 			{								/* pop statate in included */
	yypop_buffer_state();
	if ( !YY_CURRENT_BUFFER ) yyterminate();
}


