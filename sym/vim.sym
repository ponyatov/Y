.file 'filetype.vim'
au BufNewFile,BufRead *.sym set filetype=sym
au BufNewFile,BufRead *.bI  set filetype=sym
au BufNewFile,BufRead *.log set filetype=sym
au BufNewFile,BufRead *.toc set filetype=config

au BufNewFile,BufRead *.log set autoread
au BufNewFile,BufRead *.toc set autoread
au BufNewFile,BufRead *.ypp set autoread
au BufNewFile,BufRead *.lpp set autoread
au BufNewFile,BufRead *.hpp set autoread
au BufNewFile,BufRead *.cpp set autoread
au BufNewFile,BufRead Makefile set autoread

#au BufNewFile,BufRead *.sym tabf %:r.log|set filetype=sym|set autoread
#au BufNewFile,BufRead *.sym tabf %:r.toc|set filetype=sym|set autoread
#au BufNewFile,BufRead *.sym tabf %:r.ypp|set filetype=yacc
#au BufNewFile,BufRead *.sym tabf %:r.lpp|set filetype=lex
#au BufNewFile,BufRead *.sym tabf %:r.hpp|set filetype=cpp
#au BufNewFile,BufRead *.sym tabf %:r.cpp|set filetype=cpp
#au BufNewFile,BufRead *.sym tabf Makefile|set filetype=make
#au BufNewFile,BufRead *.sym tabn 1
.eof

.file 'syntax.vim'
" Language: bI/sym
" Maintainer: $AUTHOR
" GitHub: $GITHUB,MODULE

" \# line comments
syntax match	Comment		"\\v\#.*"

" .directive
syntax match	Todo		"\\v^\\.[a-z]+[\\+\\-]?[ \\t]*"

" code inlines (X-expressions based on AST-like objects)
syntax match Keyword "\\v\\\$"
syntax match Keyword "\\v\\\@"

" number (not supported by $MODULE,' language, only color highligh for easy reading)'
syntax match	Constant	"\\v[0-9]+"

" 'string'
syntax region	String		start="'" end="'"
#syntax region	String		start="\\"" end="\\""

" <object:dump>
syntax match	Constant	"\\v\\<.+\\:.+\\>"

let b:current_syntax = "$MODULE,'"'
.eof

