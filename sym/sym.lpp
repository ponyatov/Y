/* DO NOT EDIT: this file was autogened by bI/sym language system */
/***** lexer_head.sym *****/
%{
#include "sym.hpp"
														/* token macroses */
	/* single char */
#define TC(X)	{ yylval.c = yytext[0]; return X; }
	/* escaped single char */
#define T1(X)	{ yylval.c = yytext[1]; return X; }
	/* simple string */
#define TS(X)	{ yylval.s = new string(yytext); return X; }
	/* dynamic engine basic object (tag+value) */
#define TO(C,X)	{ yylval.o = new object(C,yytext); return X; }
	/* dynamic engine class inherited from basic object */
#define TX(C,X)	{ yylval.o = new C(yytext); return X; }

string StrBuf;								/* buffer for string parser mode */

void incFileName(object* o) {						/* process included .sym */
	string filename = o->eval()->value;		/* eval(o) as filename parameter */
	W(new directive(".inc "+filename),false);  		/* dump directive to log */
	yyin = fopen(filename.c_str(),"r");			  /* open included .sym file */
	if (!yyin) yyerror(".inc "+filename);			   /* check file open ok */
	yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE )); /* switch lex */
}
%}
					/* options */
%option noyywrap
					/* enable line numbers info in lexer */
%option yylineno
					/* lexer states */
					/* bI/sym expresssion mode */
%x x
					/* string parsing */
%x s
/***** lexer_head.sym *****/
%%

\\.					T1(CHAR)						/* escape prefixed char */
#[^\n]*\n			{}								/* line comment */

^.inc				{BEGIN(x); TO("sym",FINC);}		/* .inc lude .sym */
<<EOF>> 			{								/* pop state in included */
	yypop_buffer_state();
	if ( !YY_CURRENT_BUFFER ) yyterminate();
}
													/* documenting directives */
^\.title[^\n]*		TX(directive,DIRECTIVE)			/* curr.module title */
^\.sec\+?[^\n]*		TX(directive,DIRECTIVE)			/* doc sectioning */

^\.module[^\n]*		TX(directive,DIRECTIVE)				/* set current module */
^\.file				{BEGIN(x); TO("sym",FFILE);}		/* switch output file */
^\.eof				{BEGIN(INITIAL); TO("sym",FEOF);}	/* end output file */

												/* bI/sym expressions mode */
\@					{BEGIN(x); TC(AX);}			/* dump AST */
\$					{BEGIN(x); TC(SX);}			/* evaluate (compute) AST */
<x>\n				{BEGIN(INITIAL); TC(EOL);}	/* EOL is end of expression */
<x>,				TC(COMMA)					/* list separator */
<x>[a-zA-Z0-9]+		TO("sym",SYM)				/* generic bI language symbol */

												/* string parsing mode */
<x>\'				{BEGIN(s); StrBuf="";}		/* go from X-mode: start str */
<s>\'				{BEGIN(x); 					/* end string marker */
					yylval.o=new object("str",StrBuf); return STR;}
<s>\\n				{StrBuf+="\n";}				/* \n EOL in string */
<s>\\t				{StrBuf+="\t";}				/* \t TAB in string */
<s>.				{StrBuf+=yytext[0];}		/* any other char as is */

\n					TC(EOL)						/* end line <CR> */
.					TC(CHAR)					/* any undetected char */
%%
/***** lexer_foot.sym *****/
