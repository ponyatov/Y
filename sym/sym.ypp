/* DO NOT EDIT: this file was autogened by bI language system */
%{
#include "sym.hpp"
%}
%defines
%union {
	char c;
	object *o;
}
%token <c> CHAR EOL SX AX COMMA
token <o> DIRECTIVE FINC FFILE FEOF SYM STR
%type <o> ex list
%%
sym:
	| sym DIRECTIVE	{ W($2); }
	| sym FINC ex EOL		{ incFileName($3); W($4,false); }
	| sym FINC list EOL		{ incFileName($3); W($4,false); }
	| sym FFILE ex EOL		{ W(new directive(".file "+$3->eval()->value),false); W($4,false); }
	| sym FFILE list EOL	{ W(new directive(".file "+$3->eval()->value),false);  W($4,false); }
	| sym FEOF EOL		{ W((new directive(".eof"))->tagval(),false); }
	| sym AX ex			{ W($3->dump()); }
	| sym AX list		{ W($3->dump()); }
	| sym SX ex			{ W($3->eval()->value); }
	| sym SX list		{ W($3->eval()->value); }
	| sym EOL			{ W($2); }
	| sym CHAR			{ W($2); }
;

ex :
	  SYM				
	| STR
;

list :
	  ex COMMA ex		{ $$ = new object("list",""); $$->join($1); $$->join($3); }
	| list COMMA ex		{ $$ = $1; $$->join($3); }
;

%%

