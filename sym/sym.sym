
.title		bI/sym dynamic language system
.author		(c) Dmitry Ponyatov <dponyatov@gmail.com>, All rights reserved
.license	http://www.gnu.org/copyleft/lesser.html
.github		https://github.com/ponyatov/sym_stone

.about{
	bI/sym is experimental dynamic language system targeted on embedded and
	computing systems programming, hardware design, science data processing,
	and DSL compilers/translators development.
}

.module		tmp
.about		default module for experimenting and ongoing work

.sec symbol: bI language core type

class Symbol
	tag			'class/data type tag'
	value		'data item value itself'
	attr		'attributes: options, compiler/optimizator markers for item'
	nest		'optional nested symbols'
	@dump		'(idented) debug dump'
	@eval		'evaluate (compute) symbol recursive with nested symbols'

.sec simple numbers

Numbers in sym (not bI) threated as pure symbols.

0 -1 +2 3 -04 +005 0x12AF 0b1101
-1.2 +03.40 -3e+5 +03E-007

.sec Using inline files

.file Makefile
sym.log: sym.sym ./sym$(EXE) 
	./sym$(EXE) < $< > $@

.PHONY: clean
clean:
	rm -rf *~ .*~ ./sym$(EXE) *.log lex.yy.c sym.tab.?pp tmp

C = sym.cpp sym.tab.cpp lex.yy.c
H = sym.hpp sym.tab.hpp

./sym$(EXE): $(C) $(H)
	$(CXX) $(CXXFLAGS) -o $@ $(C)
sym.tab.cpp: sym.ypp
	bison $<
lex.yy.c: sym.lpp
	flex $<
.eof

.sec \.end directive stops all processing

.end

.sec Pascal program sample

PROGRAM NOMER_19;
    VAR S,A: REAL;
     D,I: INTEGER;
     BEGIN
     1: D := 20;  2: READ(A);
      FOR I := 0 TO D DO 
      BEGIN
         S := 3.141*I-A;
        WRITE(S) 
      END; IF D >= S THEN 
                 GOTO 1 ELSE GOTO 2 
    END.

