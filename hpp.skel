#include "meta.hpp"
#include <sstream>
#include <string>

//// ------------------------------------------------------------------- methods
//	map<string,Sym*> meth;
// -------------------------------------------------------------- par{}ameters
	map<string,Sym*> par;				// can be used as class slots
	void partag(Sym*);					// par[tag]=obj
	void parval(Sym*);					// par[val]=obj
// ----------------------------------------------------------------- operators	
	virtual Sym* inher(Sym*);			// A : B	inheritance
	virtual Sym* dot(Sym*);				// A . B	pair
	virtual Sym* member(Sym*);			// A % B -> A class member
// ----------------------------------------------------------------- translate
	virtual Sym* h();					// .hpp repr

// ================================================================== SPECIALS
extern Sym* nil;									// nil/false
//extern Sym* T;							// true
//extern Sym* F;							// false
//extern Sym* E;							// error
//extern Sym* D;							// default
extern Sym* Rd;										// read mode
extern Sym* Wr;										// write mode

// =================================================================== SCALARS
struct Scalar:Sym { Scalar(string,string);			// scalars common class
	Sym*eval(); };									// block env[] lookup

struct Str:Scalar { Str(string); string tagval();	// string
	Sym*eq(Sym*); Sym* add(Sym*);
	static Sym* upcase(Sym*); };					// to UPCASE

struct Hex:Scalar { Hex(string); };					// hexadecimal
struct Bin:Scalar { Bin(string); };					// bit string
struct Int:Scalar { Int(string); Int(long);			// integer
	string tagval(); long   val; };
struct Num:Scalar { Num(string); Num(double);			// floating number
	string tagval(); double val; };

// ================================================================ COMPOSITES
// =================================================== [list]
struct List:Sym { List(); Sym*str(); Sym*div(Sym*); };
// =================================================== pa:ir
struct Pair:Sym { Pair(Sym*,Sym*); Sym*eq(Sym*); };

// =============================================================== FUNCTIONALS
// =================================================== operator
struct Op:Sym { Op(string); Sym*eval(); };
// =================================================== {la:mbda}
struct Lambda:Sym { Lambda(); };
// =================================================== function
typedef Sym*(*FN)(Sym*);							// function ptr
struct Fn:Sym { Fn(string,FN); FN fn; Sym*at(Sym*); };// internal function

// =================================================================== OBJECTS
struct Class:Sym { Class(string,Class*s=NULL);		// class
	Sym*inher(Sym*);								// inherit child class
	Sym*at(Sym*); };								// apply -> instance
extern Class* cls;
struct Object:Sym { Object(Class*,Sym*); Sym*val; };// object (class instance)

// ==================================================================== FILEIO
// =================================================== directory
struct Dir:Sym { Dir(Sym*); Sym* add(Sym*); };
extern Sym* dir(Sym*);
// =================================================== file
struct File:Sym { File(Sym*); static Sym*file(Sym*);
	Sym*eq(Sym*); };//FILE *fh; ~File(); };

// ======================================================================= GUI
struct Message:Sym { Message(Sym*);	};				// message box/bar
extern Sym* message(Sym*);
struct Window:Sym { Window(Sym*); };				// window
extern Sym* window(Sym*);

// =============================================================== OS SPECIFIC
#ifdef __MINGW32__
	#include "win32.hpp"							// win32/MinGW
#else
	#include "linux.hpp"							// linux/posix
#endif

extern map<string,Sym*> env;
extern void env_init();								// init env{} on startup

