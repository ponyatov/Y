%{
#include <hpp.hpp>
%}
%defines %union { Sym*o; }
%token <o> SYM STR
%token <o> L R LQ RQ LB RB
%token <o> OP EQ AT COLON TILD
%token <o> ADD DIV
%token <o> INS
%type <o> ex scalar list lambda

%left EQ INS
%left ADD
%left DIV
%left AT
%left OP
%left TILD
%%
REPL	: | REPL ex			{ W($2->eval()); W("\n"); } ;
scalar	: SYM | STR ;
ex		: scalar
		| L ex R			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
		| LB lambda RB		{ $$=$2; }
		| TILD ex			{ $$=$1; $$->push($2); }
		| ex OP ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex INS ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list	: 					{ $$=new List(); }
		| list ex			{ $$=$1; $$->push($2); }
;
lambda	: 					{ $$=new Sym("^"); }
		| lambda SYM COLON	{ $$=$1; $$->par($2); }
		| lambda ex			{ $$=$1; $$->push($2); }
;
%%
