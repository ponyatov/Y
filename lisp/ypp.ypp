%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR DOC	/* scalars:   symbol number 'string' "docstring" */
%token <o> L R LQ RQ LB RB	/* brackets:  ( ) [ ] { }						 */
%token <o> EQ AT DOT COLON	/* operators: = @ . :							 */
%type <o> scalar ex list	/* scalar expression [list]						 */

%%
REPL	: | REPL ex			{ W($2); W("\n------");					/* parsed */
							W($2->eval()); W("\n=======\n"); } ;	/* evaled */
scalar	: SYM | NUM | STR;
ex		: scalar
		| ex DOC			{ $$=doc; $$->push($1); $$->push($2); }
		| L ex R			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
		| ex DOT ex			{ $$=new Cons($1,$3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list	:					{ $$=nil; }
		| ex list			{ $$=new Cons($1,$2); }
;
%%
