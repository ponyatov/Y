%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR				/* scalars: symbol number 'string' */
%token <o> LP RP LQ RQ LB RB		/* parens: ( ) [ ] { } */
%token <o> EQ AT DOT COLON			/* operators: = @ . : */
%type <o> ex scalar op				/* expression scalar operator */
%type <o> list lambda pair			/* [list] {la:mbda} pa:ir */
%%
bI		: | bI ex				{ W($2); W("\n------");
								W($2->eval()); W("\n=======\n"); }
scalar	: SYM | NUM | STR ;
op		: EQ | AT | DOT ;
ex		: scalar | pair
		| LP ex RP				{ $$=$2; }
		| LQ list RQ			{ $$=$2; }
		| LB lambda RB			{ $$=$2; }
		| ex op ex				{ $$=$2; $$->push($1); $$->push($3); }
;
pair	: ex COLON ex			{ $$=new Pair($1,$3); }
;
list	:						{ $$=new List(); }
		| list ex				{ $$=$1; $$->push($2); }
;
lambda	:						{ $$=new Lambda(); }
		| lambda SYM COLON 		{ $$=$1; $$->setpar($2); }
		| lambda ex				{ $$=$1; $$->push($2); }
;
%%
