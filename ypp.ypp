/***** DO NOT EDIT: this file was autogened by bI *****/
%{
#include "hpp.hpp"
%}
%defines %union {			/* syntax tree types: char string AST-item */
char c; sym *o; }	

							/* char $ ? */
%token <c> CHAR SX QX
							/* = [ ] ( ) < > { } : */
%token <c> EQ LQ RQ LP RP
%token <c> LL GG BL BR COLON
							/* symbol 12.34 'string' (classic Lisp atoms) */
%token <o> SYM NUM STR
							/* directives with special processing */
%token <o> DIRECTIVE
%token <o> MODULE FFILE FEOF INC
							/* nonterminal types: expression list vector block*/
%type <o> ex list vector block

												/* operators priority */
%left EQ
%left COLON

%%
bI:
	| bI CHAR		{ W($2); }						/* any undetected char */
	| bI MODULE		{ W($2,false); }
	| bI FFILE CHAR	{ W($2,false); W($3,false); }	/* drop <.file:..>*/
	| bI FEOF  CHAR	{ W($2,false); W($3,false); }	/* drop <.eof:..> */
	| bI INC   		{ W($2,false); W("\n",false); }	/* drop <.inc:..> */
	| bI DIRECTIVE 	{ W($2); }

	| bI SX ex 		{ W($3->eval()->value); }		/* insert computed string */
	| bI QX ex 		{ W($3);						/* dump AST and eval result */
					  W("\n----------------");
					  W($3->eval());
					  W("\n============================\n"); }
;

ex: SYM | NUM | STR								/* atoms (primary types)*/
	| LP ex RP		{ $$ = $2; }				/* (parenthes)			*/
  	| LQ list RQ	{ $$ = $2; }				/* [list]				*/
  	| LL vector GG	{ $$ = $2; }				/* <vector>				*/
	| BL block BR	{ $$ = $2; }				/* {block}				*/
	| ex COLON ex	{ $$ = new Pair($1,$3); }	/* pa:ir				*/
	| ex EQ ex		{ $$ = $1; $$->join($3); }	/* some = nested		*/
;

list:				{ $$ = new List(); }		/* create new [list] */
	| list ex		{ $$ = $1; $$->join($2); }	/* add next element */
;

vector:				{ $$ = new Vector(); }		/* create new <vector> */
	| vector ex		{ $$ = $1; $$->join($2); }	/* add next element */
;

block:				{ $$ = new Block(); }		/* create new {block} */
	| block ex		{ $$ = $1; $$->join($2); }	/* add next element */
;

%%
