%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }

%token <o> DOC DIR				/* doc: "docstring" .directive		*/
%token <o> SYM NUM STR 			/* scalars: symbol number 'string'	*/
%token <o> L R LQ RQ LB RB		/* brackets:  ( ) [ ] { }			*/
%token <o> EQ AT DOT COLON		/* operators: = @ . :				*/
%token <o> ADD SUB MUL DIV POW	/* + - * / ^						*/
%token <o> INS DEL 				/* += -=							*/
%type <o> scalar ex list		/* scalar expression [list]			*/

%left EQ
%left DOC
%left AT
%%
REPL	: | REPL ex			{ W($2); W("\n------");					/* parsed */
							W($2->eval()); W("\n=======\n"); } ;	/* evaled */
scalar	: SYM | NUM | STR ;
ex		: scalar
		| DIR ex			{ $$=$1; $$->push($2); }
		| ex DOC			{ $$=doc; $$->push($1); $$->push($2); }
		| L ex R			{ $$=$2; }
		| ex DOT ex			{ $$=new Cons($1,$3); }
		| LQ list RQ		{ $$=$2; }
		| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex INS ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DEL ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list	:					{ $$=nil; }
		| ex list			{ $$=new Cons($1,$2); }
;
%%

