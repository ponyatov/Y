%{
void incFile(AST* inc) {								/* .include processing */
	yyin = fopen(inc->val.c_str(),"r");
	if (!yyin) yyerror(inc->tagval());
	yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE));
}
%}
%x lexdoc
												/* lexer state: #| block comment |# */
%x lexcomment
%%
#\|					{BEGIN(lexcomment);}				/* block comment */
<lexcomment>\|\#	{BEGIN(INITIAL);}
<lexcomment>\n		{}
<lexcomment>.		{}

														/* numbers: */
{S}{N}				TOC(Int,NUM)						/* integer */
{S}{N}\.{N}			TOC(Num,NUM)						/* float */
{S}{N}[eE]{S}{N}	TOC(Num,NUM)						/* exponential */
0x[0-9A-F]+			TOC(Hex,NUM)						/* machine hex */
0b[01]+				TOC(Bin,NUM)						/* machine binary */

\"					{BEGIN(lexdoc);StringLexBuffer="";}	/* docstring parser */
<lexdoc>\"			{BEGIN(INITIAL);
					yylval.o = new Str(StringLexBuffer); return DOC; }
<lexdoc>.			{StringLexBuffer+=yytext[0];}

\,					TOC(Op,COMMA)
\:					TOC(Op,COLON)

\+					TOC(Op,ADD)
\-					TOC(Op,SUB)
\*					TOC(Op,MUL)
\/					TOC(Op,DIV)
\^					TOC(Op,POW)

<<EOF>>				{ yypop_buffer_state();				/* end of .inluded file */
					if ( !YY_CURRENT_BUFFER )
						yyterminate();}
%%
