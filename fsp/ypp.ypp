%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR 				/* scalars: symbol number 'string'	*/
%token <o> L R LQ RQ LB RB			/* brackets:  ( ) [ ] { }			*/
%token <o> EQ COLON AT DOT			/* operators: = : @ .				*/
%token <o> ADD SUB MUL DIV POW		/* + - * / ^						*/
%type <o> ex scalar list /* lambda		/* expression scalar [list] {lambda} */
%type <o> binop
%%
REPL	: | REPL ex			{ W($2); W("\n------");	}				/* parsed */
scalar	: SYM | NUM | STR ;
binop	: EQ | COLON | AT | DOT | ADD | SUB | MUL | DIV | POW ;
ex		: scalar
		| ex binop ex		{ $$=$2; $$->push($1); $$->push($3); }
		| L ex R			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
;
list	:					{ $$=new List(); }
		| list ex			{ $$=$1; $$->push($2); }
;
%%
