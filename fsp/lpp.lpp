%{
#include "hpp.hpp"
string LexString;											// string buffer
%}
%option noyywrap
%option yylineno
%x lexstring
%%
#[^\n]*			{}											/* line comment */

															/* string parser */
'				{BEGIN(lexstring); LexString=""; }
<lexstring>'	{BEGIN(INITIAL); yylval.o = new Str(LexString); return STR; }
<lexstring>.	{LexString+=yytext[0];}

[a-zA-Z0-9_]+		TOC(Sym,SYM)							/* symbol */

\(					TOC(Op,L)								/* brackets */
\)					TOC(Op,R)
\[					TOC(Op,LQ)
\]					TOC(Op,RQ)
\{					TOC(Op,LB)
\}					TOC(Op,RB)
															/* operators */
\=					TOC(Op,EQ)								/* assignment */
\:					TOC(Op,COLON)							/* inheritance */
\@					TOC(Op,AT)								/* apply */
\.					TOC(Op,DOT)								/* index */
\+					TOC(Op,ADD)								/* \ arithmetic */
\-					TOC(Op,SUB)
\*					TOC(Op,MUL)
\/					TOC(Op,DIV)
\^					TOC(Op,POW)								/* / */

[ \t\r\n]+		{}									/* drop spaces */
%%
