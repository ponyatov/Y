%{
#include "dura.hpp"
#define TC(X)		{ yylval.c = yytext[0]; return X; }
#define T1(X)		{ yylval.c = yytext[1]; return X; }
#define TS(X)		{ yylval.s = new string(yytext); return X; }
#define TO(C,X)		{ if (env[yytext]) yylval.o = env[yytext]; \
					else yylval.o = new biObject(C,yytext); return X; }
#define TX(C,X)		{ if (env[yytext]) yylval.o = env[yytext]; \
					else yylval.o = new C(yytext); return X; }
%}

%option noyywrap
%option yylineno

%x f
%x x

%%
\\.						T1(C)
#[^\n]*\n				{}

^\.module[ \t]+[^\n]+	TX(biDirective,MODULE)
^\.file[ \t]+[^\n]+		TX(biDirective,FFILE)
^\.eof					TX(biDirective,FEOF)
^\.sec[ \t]+[^\n]+		TX(biDirective,DIRECTIVE)
^\.title[ \t]+[^\n]+	TX(biDirective,DIRECTIVE)
^\.author[ \t]+[^\n]+	TX(biDirective,DIRECTIVE)
^\.github[ \t]+[^\n]+	TX(biDirective,DIRECTIVE)

\$						{BEGIN(x); TC(SX);}
\@						{BEGIN(x); TC(AX);}
\?						{BEGIN(x); TC(QX);}
<x>[ \t\n]				{BEGIN(INITIAL); TC(EOL);}
<x>'[^']*'				TX(biString,SYM)
<x>[a-zA-Z\.]+			TO("sym",SYM)
<x>\(					TC(LP)
<x>\)					TC(RP)
<x>,					TC(COMMA)
<x>\/					TO("/",EQ)
<x>=					TO("=",EQ)

\n						TC(EOL)
.						TC(C)
%%

