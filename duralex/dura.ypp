%{
#include "dura.hpp"
%}

%defines

%union {
	char c;
	string *s;
	biObject *o;
}

%token <c> C EOL QX SX AX LP RP COMMA 
%token <o> SYM STR MODULE FFILE FEOF dEND DIRECTIVE
%token <o> ADD SUB MUL DIV POW EQ
%type <o> ex list

%left ADD SUB
%left MUL DIV
%left PFX
%left COMMA

%%
dura: 
	| dura dEND				{ terminator(); }
	| dura MODULE EOL		{ W($2); }
	| dura FFILE EOL		{ W($2,false); W($3,false); }
	| dura FEOF				{ W($2->tagval(),false); }								
	| dura EOL				{ W($2); }
	| dura QX ex			{ W($3->dump()); }
	| dura AX ex			{ W($3->eval()); }
	| dura SX ex			{ W($3->eval()->value); }
	| dura DIRECTIVE		{ W($2); }
	| dura C				{ W($2); }
;

ex :
   	  SYM					{ $$=$1; }
	| STR					{ $$=$1; }
	| LP ex RP				{ $$=$2; }
	| list					{ $$=$1; }
	| ex DIV ex				{ $$=$2; $$->join($1); $$->join($3); }
	| SYM EQ ex				{ $$=$2; $$->join($1); $$->join($3); }
	| SYM LP RP				{ $$=$1; $$->tag="fn"; } 
	| SYM LP SYM RP			{ $$=$1; $$->tag="fn"; $$->join($3); } 
;

list :
	   COMMA 			{ $$= new biObject("list",""); }
	 | ex COMMA 		{ $$= new biObject("list",""); $$->join($1); }
	 | ex COMMA ex		{ $$= new biObject("list",""); $$->join($1); $$->join($3); }
	 | list COMMA ex	{ $$=$1; $$->join($3); }
;
%%

