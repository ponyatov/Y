%{
#include "bI.hpp"
%}

%union {
	char c;
	int i;
	float f;
	std::string *s;
	biObject *bi;
};

%token <c> CHAR
%token <i> INT
%token <i> BIN
%token <i> HEX
%token <f> FLOAT
%token <s> STRING

%token <bi> ID
%token <bi> OP
%token <c> EQ

%type <bi> expr

%%
PROGRAM : 
	| PROGRAM CHAR { std::cout<<"["<<$2<<"]\n"; }
	| PROGRAM INT  { std::cout<<"(int "<<$2<<")\n"; }
	| PROGRAM BIN  { std::cout<<"(bin "<<$2<<")\n"; }
	| PROGRAM HEX  { std::cout<<"(hex "<<$2<<")\n"; }
	| PROGRAM FLOAT { std::cout<<"(float "<<$2<<")\n"; }
	| PROGRAM STRING { std::cout<<"(string "<<$2->c_str()<<")\n"; }
	| PROGRAM expr	{ 
		switch($2->t) {
		case biObject::ID:	std::cout << "(id "<<$2->v.id->c_str()<<")\n"; break;
		case biObject::OP:	std::cout << "(op "<<$2->v.id->c_str()<<")\n"; break;
			default: yyerror("bad type");
		}}
;

expr:
	  ID
	| OP
	| STRING
	| ID EQ	expr	{ $$=$1;
		std::cout<<"(=="<<$2<<" "<<$1->v.id->c_str()<<" ";
		switch ($3->t) {
			default: yyerror("type");
		}
		std::cout<<")\n"; }
;
%%
