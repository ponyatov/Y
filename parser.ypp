%{
#include "bI.hpp"
%}

%defines

%union {
	char c;
	string *s;
	biObject *o;
}

%token <s> END
%token <o> NUM

%%
bi	: 
   	| bi END					{ W($2); terminator(); }
   	| bi NUM
;
%%

/* unused

%token <c> C EOL
S END
%type <o> script

%token <o> DIRECTIVE FFILE FEOF STR SYM 
%token <o> OP COLON EQ ADD SUB MUL DIV POW
%token <s> CLASS ENDCLASS
%type <o> ex classdef classym op docstring 


sym :
	| sym script				{ W($2); }
	| sym ex					{ W($2); }
	| sym classdef				{ W($2); }
	| sym DIRECTIVE				{ W($2); }
	| sym FFILE	EOL				{ W($2,false); W($3,false); }
	| sym FEOF					{ W($2,false); if (bi_file) delete bi_file; }
	| sym END					{ W($2); terminator(); }
	| sym EOL					{ W($2); }
	| sym ENDCLASS				{ W($2); }
	| sym op					{ W($2); }
	| sym S						{ W($2); }
	| sym C						{ W($2); }
;

ex	: NUM
	| STR
	| SYM
	| ex EQ ex					{ 
		$$=$2; $$->nest.push_back($1); $$->nest.push_back($3); }
	| docstring
;

classdef : classym				{ $$ = $1; }
	| classym COLON SYM			{ 
		$$ = new biClass(bi_class_registry[$3->value],$1); }
;

classym : CLASS SYM 			{ $$ = new biClass($2); }
;

op : OP | COLON | ADD | SUB | MUL | DIV ;

docstring :
	  SYM STR					{ $$ = $1; $$->attr["doc"] = $2; }
	| classdef STR				{ $$ = $1; $$->attr["doc"] = $2; }
;
*/

