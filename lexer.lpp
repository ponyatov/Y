%{
#include "bI.hpp"

#define TC(X)	{ yylval.c = yytext[0];     			return X; }
#define T1(X)	{ yylval.c = yytext[1];					return X; }
#define TS(X)	{ yylval.s = new string(yytext);     	return X; }
#define TO(C,X)	{ yylval.o = new biObject(C,yytext); 	return X; }
#define TX(C,X)	{ yylval.o = new C(yytext); 			return X; }
%}

%option noyywrap
%option yylineno

		/* expression mode */
%x ss

S	[\+\-]{0,1}
D	[0-9]+

%%
													/* numeric literals */
{D}						TO("int",NUM)				
0x[0-9A-F]+				TO("hex",NUM)
0b[01]+					TO("bin",NUM)
{D}\.{D}				TO("float",NUM)
{D}[eE]{S}{D}			TO("float",NUM)
													/* operators */
\+						TO("+",ADD)
\-						TO("-",SUB)
\*						TO("*",MUL)
\/						TO("/",DIV)
\^						TO("^",POW)

^\.end					TX(biDirective,END)			/* source end marker */
%%

