%{
#include "bI.hpp"

#define TC(X)	{ yylval.c = yytext[0];     			return X; }
#define T1(X)	{ yylval.c = yytext[1];					return X; }
#define TS(X)	{ yylval.s = new string(yytext);     	return X; }

#define TO(C,X)	{\
	yylval.o = env[yytext];\
	if (!yylval.o) {\
		yylval.o = new biObject(C,yytext);\
		env[yytext] = yylval.o;\
	}\
	return X;\
}

#define TX(C,X)	{ yylval.o = new C(yytext); 			return X; }

%}

%option noyywrap
%option yylineno

		/* expression mode (simple script) */
%x ss
		/* class definition */
%x cc

S	[\+\-]{0,1}
D	[0-9]+

%%
\r						{}							/* drop DOS eols */
#[^\n]*\n+				{}							/* line comment */
\\.						T1(C)						/* escaped char */

													
^\.end					TX(biDirective,END)			/* source end marker */
^\.[a-z]+[ \t]*/\{		TX(biDirective,DIRECTIVE)	/* {} blocked directive */
^\.file+[ \t]+[^\n]*	TX(biDirective,FFILE)		/* .file */
^\.eof					TX(biDirective,FEOF)		/* .eof */
^\.[a-z]+[ \t]*[^\n]*	TX(biDirective,DIRECTIVE)	/* directive */

													/* prefixes */
\$						{BEGIN(ss);TC(SX);}			/* $ dump AST prefix */
\?						{BEGIN(ss);TC(QX);}			/* ? eval prefix */
<ss>[ \t\n]+			{BEGIN(INITIAL);TC(EOL);}	/* end line syntax marker */
<ss,cc>[a-zA-Z][a-zA-Z0-9]*	TO("sym",SYM)			/* symbol */
<ss,cc>\'[^\']*\'			TO("str",STR)			/* string */
<ss,cc>\"[^\"]*\"			TO("str",STR)
<ss>{D}					TX(biInt,NUM)				/* numeric literals */
<ss>0x[0-9A-F]+			TO("hex",NUM)
<ss>0b[01]+				TO("bin",NUM)
<ss>{D}\.{D}			TX(biFloat,NUM)
<ss>{D}[eE]{S}{D}		TX(biFloat,NUM)
<ss>{D}\.{D}[eE]{S}{D}	TX(biFloat,NUM)
<ss>\+					TX(biOP,ADD)				/* operators */
<ss>\-					TX(biOP,SUB)
<ss>\*					TX(biOP,MUL)
<ss>\/					TX(biOP,DIV)
<ss>\^					TX(biOP,POW)
<ss>\(					TO("(",LP)					/* parens */
<ss>\)					TO(")",RP)
<ss,cc>=				TX(biOP,EQ)

^class					{BEGIN(cc);TC(CLASS);}			/* class def */
<cc>\n\n				{BEGIN(INITIAL);TC(ENDCLASS);}
<cc>[ \t\n]				{}
<cc>:					TC(COLON)

\n						TC(EOL)						/* end line in non-ss mode */
.						TC(C)						/* any undetected char */
%%

