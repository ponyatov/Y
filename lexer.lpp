%{
#include "bI.hpp"

#define TC(X)	{ yylval.c = yytext[0];     			return X; }
#define T1(X)	{ yylval.c = yytext[1];					return X; }
#define TS(X)	{ yylval.s = new string(yytext);     	return X; }
#define TO(C,X)	{ yylval.o = new biObject(C,yytext); 	return X; }
#define TA(C,X)	{ yylval.o = new C(yytext); 		 	return X; }
%}

%option noyywrap
%option yylineno

%s xx
%s bb

S	[\+\-]{0,1}
D	[0-9]+

%%
\r							{}		/* win/dos eol gluck */
\\.							T1(C)	/* escaped char */
#[^\n]*						{}		/* line comment */

[a-z]+@[a-z\.]+				TS(S)	/* indoc email vs signal fix */

\$							{BEGIN(xx); TC(SX);}
\?							{BEGIN(xx); TC(QX);}
<xx>[ \t\n]					{BEGIN(INITIAL); TS(S); }
<xx>:						TC(COLON)
<xx>,						TC(COMMA)
<xx>\(						TC(LP)
<xx>\)						TC(RP)
<xx,bb>{S}{D}				TO("int",NUM)
<xx,bb>0x[0-9A-Z]+			TO("hex",NUM)
<xx,bb>0b[01]+				TO("bin",NUM)
<xx,bb>{S}{D}\.{D}			TO("float",NUM)
<xx,bb>{S}{D}[eE]{S}{D}		TO("float",NUM)

^\.file[ \t]+[^\n]+				TA(biDirective,DOTFILE)
^\.[a-z]+[\+\-]?[ \t]*[^\n]*	TA(biDirective,DOT)

^class[ \t]+						{BEGIN(bb); TS(CLASS);}
<bb>\n\n							{BEGIN(INITIAL); TS(ENDCLASS); }
@[a-z0-9_\+\-\*\/]+					TO("sig",SIG)
<xx,bb>\.?[a-zA-Z_][a-zA-Z0-9_]*	TA(biSym,SYM)

[ \t]*->[ \t]*				TS(ARROW)			/* -> cosmetics */

\'[^\']*\'					TA(biString,STR)

\n							TC(EOL)
.							TC(C)
%%

