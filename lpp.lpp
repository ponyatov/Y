%{
#include "hpp.hpp"
string LexString;											// string buffer
void incLude(Sym*inc) {										// .inc processing
	if (!(yyin = fopen((inc->val+".bi").c_str(),"r"))) yyerror("");	// open
	yypush_buffer_state(yy_create_buffer(yyin,YY_BUF_SIZE));// push to lexer
}
%}
%option noyywrap
%option yylineno
								/* extra lexer states: string/docstring parsing */
%x lexstring docstring
								/* optional sign in numbers */
S [\+\-]?
								/* decimal number digit(s) */
N [0-9]+
%%
#[^\n]*			{}											/* line comment */

^\.inc[ \t]+[^\n]*	{incLude(new Directive(yytext));}		/* .include */
^\.[a-z]+[^\n]*	TOC(Directive,DIR)							/* .directive */

															/* string parser */
'				{BEGIN(lexstring); LexString=""; }
<lexstring>'	{BEGIN(INITIAL); yylval.o = new Str(LexString); return STR; }
<lexstring>\\\\	{LexString+='\\';}
<lexstring>\\'	{LexString+='\'';}
<lexstring>\\t	{LexString+='\t';}
<lexstring>\\n	{LexString+='\n';}
<lexstring>\n	{LexString+='\n';}
<lexstring>.	{LexString+=yytext[0];}
															/* docstring */
\"				{BEGIN(docstring); LexString=""; }
<docstring>\"	{BEGIN(INITIAL); yylval.o = new Str(LexString); return DOC; }
<docstring>\\\"	{LexString+='"';}
<docstring>\\t	{LexString+='\t';}
<docstring>\\n	{LexString+='\n';}
<docstring>.	{LexString+=yytext[0];}

															/* == numbers == */
{S}{N}				TOC(Int,NUM)							/* integer */
{S}{N}\.{N}			TOC(Num,NUM)							/* float */
{S}{N}[eE]{S}{N}	TOC(Num,NUM)							/* exponential */
0x[0-9A-F]+			TOC(Hex,NUM)							/* hexadecimal */
0b[01]+				TOC(Bin,NUM)							/* bit string */

[a-zA-Z0-9_]+		TOC(Sym,SYM)							/* symbol */

\(					TOC(Op,L)								/* brackets */
\)					TOC(Op,R)
\[					TOC(Op,LQ)
\]					TOC(Op,RQ)
\{					TOC(Op,LB)
\}					TOC(Op,RB)
															/* operators */
\=					TOC(Op,EQ)								/* assignment */
\:					TOC(Op,COLON)							/* inheritance */
\@					TOC(Op,AT)								/* apply */
\.					TOC(Op,DOT)								/* index */
\%					TOC(Op,PERC)							/* member */
\+					TOC(Op,ADD)								/* \ arithmetic */
\-					TOC(Op,SUB)
\*					TOC(Op,MUL)
\/					TOC(Op,DIV)
\^					TOC(Op,POW)								/* / */
\+\=				TOC(Op,INS)								/* ins \ composite */
\-\=				TOC(Op,DEL)								/* del / */


[ \t\r\n]+		{}									/* drop spaces */
.				{}									/* drop undetected chars */
<<EOF>>			{ yypop_buffer_state();				/* end of .inluded file */
				if (!YY_CURRENT_BUFFER) yyterminate();}
%%
