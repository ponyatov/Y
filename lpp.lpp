%{
#include "hpp.hpp"
string StringLexBuffer;				/* string parsing buffer */
%}
%option noyywrap
%option yylineno
									/* lexer state: string parsing mode */
%x lexstring
									/* optional number sign */
S [\+\-]?
									/* decimal number digit(s) */
N [0-9]+
%%
#[^\n]*\n			{}				/* line comment */

'					{BEGIN(lexstring);StringLexBuffer="";}	/* string parser */
<lexstring>'		{BEGIN(INITIAL);
					yylval.o = new Str(StringLexBuffer); return STR; }
<lexstring>.		{StringLexBuffer+=yytext[0];}

[a-zA-Z0-9_]+		TOC(Sym,SYM)	/* symbol */

									/* parens */
\(					TOC(Op,LP)
\)					TOC(Op,RP)
\[					TOC(Op,LQ)
\]					TOC(Op,RQ)
\{					TOC(Op,LB)
\}					TOC(Op,RB)
									/* operators */
\=					TOC(Op,EQ)							
\@					TOC(Op,AT)
\.					TOC(Op,DOT)

[ \t\r\n]+			{}				/* drop spaces */
.					{}				/* drop undetected chars */
%%
